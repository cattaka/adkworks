package net.cattaka.android.humitemp4pd.entity;

import net.cattaka.util.cathandsgendroid.accessor.IAccessor;
import net.cattaka.util.cathandsgendroid.accessor.Accessors;

import android.content.ContentValues;
import android.database.Cursor;


import android.database.sqlite.SQLiteDatabase;





/**
 * This class is auto-generated by APT; please do not edit by hand.
 */
public class HumiTempModelCatHands {

    public static final IAccessor<Long> ACCESSOR_ID;
    public static final IAccessor<java.util.Date> ACCESSOR_DATE;
    public static final IAccessor<Float> ACCESSOR_HUMIDITY;
    public static final IAccessor<Float> ACCESSOR_TEMPERATURE;
    
    static {

        ACCESSOR_ID = Accessors.LongAccessor.createAccessor(Long.class);
        ACCESSOR_DATE = Accessors.DateAccessor.createAccessor(java.util.Date.class);
        ACCESSOR_HUMIDITY = Accessors.FloatAccessor.createAccessor(Float.class);
        ACCESSOR_TEMPERATURE = Accessors.FloatAccessor.createAccessor(Float.class);
    }


    public static final String SQL_CREATE_TABLE = "CREATE TABLE humiTempModel(id INTEGER PRIMARY KEY AUTOINCREMENT,date INTEGER,humidity REAL,temperature REAL)";


    public static void upgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

    };

    public static final String TABLE_NAME = "humiTempModel";
    public static final String COLUMNS = "id,date,humidity,temperature";
    public static final String[] COLUMNS_ARRAY = new String[] {"id","date","humidity","temperature"};

    public static final int COL_INDEX_ID = 0;
    public static final int COL_INDEX_DATE = 1;
    public static final int COL_INDEX_HUMIDITY = 2;
    public static final int COL_INDEX_TEMPERATURE = 3;

    public static final String COL_NAME_ID = "id";
    public static final String COL_NAME_DATE = "date";
    public static final String COL_NAME_HUMIDITY = "humidity";
    public static final String COL_NAME_TEMPERATURE = "temperature";

    public static void readCursorByIndex(Cursor cursor, HumiTempModel dest) {

        dest.setId(ACCESSOR_ID.readFromCursor(cursor,0));
        dest.setDate(ACCESSOR_DATE.readFromCursor(cursor,1));
        dest.setHumidity(ACCESSOR_HUMIDITY.readFromCursor(cursor,2));
        dest.setTemperature(ACCESSOR_TEMPERATURE.readFromCursor(cursor,3));
    }
    
    public static HumiTempModel readCursorByIndex(Cursor cursor) {
        HumiTempModel result = new HumiTempModel();
        readCursorByIndex(cursor, result);
        return result;
    }
    public static void readCursorByName(Cursor cursor, HumiTempModel dest) {
        int idx;

        idx = cursor.getColumnIndex("id");
        dest.setId(ACCESSOR_ID.readFromCursor(cursor,idx));
        idx = cursor.getColumnIndex("date");
        dest.setDate(ACCESSOR_DATE.readFromCursor(cursor,idx));
        idx = cursor.getColumnIndex("humidity");
        dest.setHumidity(ACCESSOR_HUMIDITY.readFromCursor(cursor,idx));
        idx = cursor.getColumnIndex("temperature");
        dest.setTemperature(ACCESSOR_TEMPERATURE.readFromCursor(cursor,idx));
    }
    public static HumiTempModel readCursorByName(Cursor cursor) {
        HumiTempModel result = new HumiTempModel();
        readCursorByName(cursor, result);
        return result;
    }
    public static void putToContentValues(ContentValues dest, HumiTempModel model, boolean withPrimaryKey) {
        if (withPrimaryKey) {
            ACCESSOR_ID.putToContentValues(dest, "id", model.getId());
        }

        ACCESSOR_DATE.putToContentValues(dest, "date", model.getDate());
        ACCESSOR_HUMIDITY.putToContentValues(dest, "humidity", model.getHumidity());
        ACCESSOR_TEMPERATURE.putToContentValues(dest, "temperature", model.getTemperature());
    }




    public static long insert(SQLiteDatabase db, HumiTempModel model) {
        ContentValues values = new ContentValues();
        putToContentValues(values, model, false);
        long key = db.insert(TABLE_NAME, null, values);
        model.setId((long)key);
        return key;
    }
    public static int update(SQLiteDatabase db, HumiTempModel model) {
        ContentValues values = new ContentValues();
        String whereClause = "id=?";
        String[] whereArgs = new String[]{ACCESSOR_ID.stringValue(model.getId())};
        putToContentValues(values, model, false);
        return db.update(TABLE_NAME, values, whereClause, whereArgs);
    }
    public static int delete(SQLiteDatabase db, Long key) {
        String whereClause = "id=?";
        String[] whereArgs = new String[]{ACCESSOR_ID.stringValue(key)};
        return db.delete(TABLE_NAME, whereClause, whereArgs);
    }



















}
