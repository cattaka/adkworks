package net.cattaka.android.humitemp4pd.entity;

import net.cattaka.util.cathandsgendroid.accessor.IAccessor;
import net.cattaka.util.cathandsgendroid.accessor.Accessors;

import android.content.ContentValues;
import android.database.Cursor;


import android.database.sqlite.SQLiteDatabase;





/**
 * This class is auto-generated by APT; please do not edit by hand.
 */
public class MySocketAddressCatHands {

    public static final IAccessor<Long> ACCESSOR_ID;
    public static final IAccessor<String> ACCESSOR_HOST_NAME;
    public static final IAccessor<Integer> ACCESSOR_PORT;
    
    static {

        ACCESSOR_ID = Accessors.LongAccessor.createAccessor(Long.class);
        ACCESSOR_HOST_NAME = Accessors.StringAccessor.createAccessor(String.class);
        ACCESSOR_PORT = Accessors.IntegerAccessor.createAccessor(Integer.class);
    }


    public static final String SQL_CREATE_TABLE = "CREATE TABLE mySocketAddress(id INTEGER PRIMARY KEY AUTOINCREMENT,hostName TEXT,port INTEGER)";


    public static void upgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

    };

    public static final String TABLE_NAME = "mySocketAddress";
    public static final String COLUMNS = "id,hostName,port";
    public static final String[] COLUMNS_ARRAY = new String[] {"id","hostName","port"};

    public static final int COL_INDEX_ID = 0;
    public static final int COL_INDEX_HOST_NAME = 1;
    public static final int COL_INDEX_PORT = 2;

    public static final String COL_NAME_ID = "id";
    public static final String COL_NAME_HOST_NAME = "hostName";
    public static final String COL_NAME_PORT = "port";

    public static void readCursorByIndex(Cursor cursor, MySocketAddress dest) {

        dest.setId(ACCESSOR_ID.readFromCursor(cursor,0));
        dest.setHostName(ACCESSOR_HOST_NAME.readFromCursor(cursor,1));
        dest.setPort(ACCESSOR_PORT.readFromCursor(cursor,2));
    }
    
    public static MySocketAddress readCursorByIndex(Cursor cursor) {
        MySocketAddress result = new MySocketAddress();
        readCursorByIndex(cursor, result);
        return result;
    }
    public static void readCursorByName(Cursor cursor, MySocketAddress dest) {
        int idx;

        idx = cursor.getColumnIndex("id");
        dest.setId(ACCESSOR_ID.readFromCursor(cursor,idx));
        idx = cursor.getColumnIndex("hostName");
        dest.setHostName(ACCESSOR_HOST_NAME.readFromCursor(cursor,idx));
        idx = cursor.getColumnIndex("port");
        dest.setPort(ACCESSOR_PORT.readFromCursor(cursor,idx));
    }
    public static MySocketAddress readCursorByName(Cursor cursor) {
        MySocketAddress result = new MySocketAddress();
        readCursorByName(cursor, result);
        return result;
    }
    public static void putToContentValues(ContentValues dest, MySocketAddress model, boolean withPrimaryKey) {
        if (withPrimaryKey) {
            ACCESSOR_ID.putToContentValues(dest, "id", model.getId());
        }

        ACCESSOR_HOST_NAME.putToContentValues(dest, "hostName", model.getHostName());
        ACCESSOR_PORT.putToContentValues(dest, "port", model.getPort());
    }




    public static long insert(SQLiteDatabase db, MySocketAddress model) {
        ContentValues values = new ContentValues();
        putToContentValues(values, model, false);
        long key = db.insert(TABLE_NAME, null, values);
        model.setId((long)key);
        return key;
    }
    public static int update(SQLiteDatabase db, MySocketAddress model) {
        ContentValues values = new ContentValues();
        String whereClause = "id=?";
        String[] whereArgs = new String[]{ACCESSOR_ID.stringValue(model.getId())};
        putToContentValues(values, model, false);
        return db.update(TABLE_NAME, values, whereClause, whereArgs);
    }
    public static int delete(SQLiteDatabase db, Long key) {
        String whereClause = "id=?";
        String[] whereArgs = new String[]{ACCESSOR_ID.stringValue(key)};
        return db.delete(TABLE_NAME, whereClause, whereArgs);
    }




    public static java.util.List<MySocketAddress> findOrderByIdAsc(SQLiteDatabase db, int limit) {
        Cursor cursor = findCursorOrderByIdAsc(db, limit);
        java.util.List<MySocketAddress> result = new java.util.ArrayList<MySocketAddress>();
        while (cursor.moveToNext()) {
            result.add(readCursorByIndex(cursor));
        }
        cursor.close();
        return result;
    }
    public static Cursor findCursorOrderByIdAsc(SQLiteDatabase db, int limit) {
        String selection = "";
        String[] selectionArgs = new String[]{

        };
        String limitStr = (limit > 0) ? String.valueOf(limit) : null;

        String orderBy = "id asc";
        return db.query(TABLE_NAME, COLUMNS_ARRAY, selection, selectionArgs, null, null, orderBy, limitStr);

    }



















}
